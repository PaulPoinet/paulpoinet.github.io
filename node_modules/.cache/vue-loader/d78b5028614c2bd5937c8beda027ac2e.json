{"remainingRequest":"C:\\Users\\Paul Poinet\\Documents\\AEC_Delta\\01_SourceTree\\theweb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Paul Poinet\\Documents\\AEC_Delta\\01_SourceTree\\theweb\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!C:\\Users\\Paul Poinet\\Documents\\AEC_Delta\\01_SourceTree\\theweb\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Paul Poinet\\Documents\\AEC_Delta\\01_SourceTree\\theweb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Paul Poinet\\Documents\\AEC_Delta\\01_SourceTree\\theweb\\src\\components\\works\\ICD-ITKE-Research-Pavilion-2013-14.vue?vue&type=template&id=b184f666&","dependencies":[{"path":"C:\\Users\\Paul Poinet\\Documents\\AEC_Delta\\01_SourceTree\\theweb\\src\\components\\works\\ICD-ITKE-Research-Pavilion-2013-14.vue","mtime":1574096599345},{"path":"C:\\Users\\Paul Poinet\\Documents\\AEC_Delta\\01_SourceTree\\theweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Paul Poinet\\Documents\\AEC_Delta\\01_SourceTree\\theweb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Paul Poinet\\Documents\\AEC_Delta\\01_SourceTree\\theweb\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\Paul Poinet\\Documents\\AEC_Delta\\01_SourceTree\\theweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Paul Poinet\\Documents\\AEC_Delta\\01_SourceTree\\theweb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgInNlY3Rpb24iLAogICAgeyBzdGF0aWNDbGFzczogIm10LTEyIiB9LAogICAgWwogICAgICBfYygKICAgICAgICAidi1jb250YWluZXIiLAogICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI3IiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LXJvdyIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsganVzdGlmeTogImNlbnRlciIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAidi1jb2wiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyBtZDogIjgiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInYtY2FyZCIsCiAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBlbGV2YXRpb246IDI0IH0gfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgInYtY2Fyb3VzZWwiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJoaWRlLWRlbGltaXRlcnMiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhcms6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiNTAwIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5pdGVtcywgZnVuY3Rpb24oaXRlbSwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfYygidi1jYXJvdXNlbC1pdGVtIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBpdGVtLnNyYyB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoInYtY2FyZC10aXRsZSIsIHsgc3RhdGljQ2xhc3M6ICJtdC0xMiIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBEZXNjcmlwdGlvbiIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygidi1jYXJkLXRleHQiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIgVGhlIEluc3RpdHV0ZSBmb3IgQ29tcHV0YXRpb25hbCBEZXNpZ24gKElDRCkgYW5kIHRoZSBJbnN0aXR1dGUgb2YgQnVpbGRpbmcgU3RydWN0dXJlcyBhbmQgU3RydWN0dXJhbCBEZXNpZ24gKElUS0UpIG9mIHRoZSBVbml2ZXJzaXR5IG9mIFN0dXR0Z2FydCBoYXZlIGNvbnN0cnVjdGVkIGFub3RoZXIgYmlvbmljIHJlc2VhcmNoIHBhdmlsaW9uLiBUaGUgcHJvamVjdCBpcyBwYXJ0IG9mIGEgc3VjY2Vzc2Z1bCBzZXJpZXMgb2YgcmVzZWFyY2ggcGF2aWxpb25zIHdoaWNoIHNob3djYXNlIHRoZSBwb3RlbnRpYWwgb2Ygbm92ZWwgZGVzaWduLCBzaW11bGF0aW9uIGFuZCBmYWJyaWNhdGlvbiBwcm9jZXNzZXMgaW4gYXJjaGl0ZWN0dXJlLiBUaGUgcHJvamVjdCB3YXMgcGxhbm5lZCBhbmQgY29uc3RydWN0ZWQgd2l0aGluIG9uZSBhbmQgYSBoYWxmIHllYXJzIGJ5IHN0dWRlbnRzIGFuZCByZXNlYXJjaGVycyB3aXRoaW4gYSBtdWx0aS1kaXNjaXBsaW5hcnkgdGVhbSBvZiBiaW9sb2dpc3RzLCBwYWxlb250b2xvZ2lzdHMsIGFyY2hpdGVjdHMgYW5kIGVuZ2luZWVycy4gIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIFRoZSBmb2N1cyBvZiB0aGUgcHJvamVjdCBpcyBhIHBhcmFsbGVsIGJvdHRvbS11cCBkZXNpZ24gc3RyYXRlZ3kgZm9yIHRoZSBiaW9taW1ldGljIGludmVzdGlnYXRpb24gb2YgbmF0dXJhbCBmaWJlciBjb21wb3NpdGUgc2hlbGxzIGFuZCB0aGUgZGV2ZWxvcG1lbnQgb2Ygbm92ZWwgcm9ib3RpYyBmYWJyaWNhdGlvbiBtZXRob2RzIGZvciBmaWJlciByZWluZm9yY2VkIHBvbHltZXIgc3RydWN0dXJlcy4gVGhlIGFpbSB3YXMgdGhlIGRldmVsb3BtZW50IG9mIGEgd2luZGluZyB0ZWNobmlxdWUgZm9yIG1vZHVsYXIsIGRvdWJsZSBsYXllcmVkIGZpYmVyIGNvbXBvc2l0ZSBzdHJ1Y3R1cmVzLCB3aGljaCByZWR1Y2VzIHRoZSByZXF1aXJlZCBmb3Jtd29yayB0byBhIG1pbmltdW0gd2hpbGUgbWFpbnRhaW5pbmcgYSBsYXJnZSBkZWdyZWUgb2YgZ2VvbWV0cmljIGZyZWVkb20uICIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBUaGVyZWZvcmUsIGZ1bmN0aW9uYWwgcHJpbmNpcGxlcyBvZiBuYXR1cmFsIGxpZ2h0d2VpZ2h0IHN0cnVjdHVyZXMgd2VyZSBhbmFseXplZCBhbmQgYWJzdHJhY3RlZCBpbiBjb29wZXJhdGlvbiB3aXRoIHRoZSBJbnN0aXR1dGUgb2YgRXZvbHV0aW9uIGFuZCBFY29sb2d5IGFuZCB0aGUgZGVwYXJ0bWVudCBmb3IgUGFsZW9iaW9sb2d5IG9mIHRoZSBVbml2ZXJzaXR5IG9mIFTDvGJpbmdlbi4gVGhyb3VnaCB0aGUgZGV2ZWxvcG1lbnQgb2YgYSBjdXN0b20gcm9ib3RpYyBmYWJyaWNhdGlvbiBtZXRob2QsIHRoZXNlIHByaW5jaXBsZXMgd2VyZSB0cmFuc2ZlcnJlZCBpbnRvIGEgbW9kdWxhciBwcm90b3R5cGUgcGF2aWxpb24uICIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInYtY2FyZC10aXRsZSIsIFtfdm0uX3YoIkJpb21pbWV0aWMgSW52ZXN0aWdhdGlvbiIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJ2LWNhcmQtdGV4dCIsIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBUaGlzIGludmVzdGlnYXRpb24gb2YgbmF0dXJhbCBsaWdodHdlaWdodCBzdHJ1Y3R1cmVzIHdhcyBjb25kdWN0ZWQgaW4gYW4gaW50ZXJkaXNjaXBsaW5hcnkgY29vcGVyYXRpb24gb2YgYXJjaGl0ZWN0cyBhbmQgZW5naW5lZXJzIGZyb20gU3R1dHRnYXJ0IFVuaXZlcnNpdHkgYW5kIGJpb2xvZ2lzdHMgZnJvbSBUdWJpbmdlbiBVbml2ZXJzaXR5IHdpdGhpbiB0aGUgTW9kdWxlOiBCaW9uaWNzIG9mIEFuaW1hbCBDb25zdHJ1Y3Rpb25zIGxlZCBieSBwcm9mLiBPbGl2ZXIgQmV0eiAoYmlvbG9neSkgYW5kIFByb2YuIEphbWVzLiBILiBOZWJlbHNpY2soZ2Vvc2NpZW5jZXMpLiBEdXJpbmcgdGhlIGludmVzdGlnYXRpb24gdGhlIEVseXRyb24sIGEgcHJvdGVjdGl2ZSBzaGVsbCBmb3IgYmVldGxlc+KAmSB3aW5ncyBhbmQgYWJkb21lbiwgaGFzIHByb3ZlZCB0byBiZSBhIHN1aXRhYmxlIHJvbGUgbW9kZWwgZm9yIGhpZ2hseSBtYXRlcmlhbCBlZmZpY2llbnQgY29uc3RydWN0aW9uLiBUaGUgcGVyZm9ybWFuY2Ugb2YgdGhlc2UgbGlnaHR3ZWlnaHQgc3RydWN0dXJlcyByZWxpZXMgb24gdGhlIGdlb21ldHJpYyBtb3JwaG9sb2d5IG9mIGEgZG91YmxlIGxheWVyZWQgc3lzdGVtIGFuZCB0aGUgbWVjaGFuaWNhbCBwcm9wZXJ0aWVzIG9mIHRoZSBuYXR1cmFsIGZpYmVyIGNvbXBvc2l0ZS4gVGhlIGFuaXNvdHJvcGljIGNoYXJhY3RlcmlzdGljIG9mIHRoaXMgbWF0ZXJpYWwsIHdoaWNoIGNvbnNpc3RzIG9mIGNoaXRpbiBmaWJlcnMgZW1iZWRkZWQgaW4gYSBwcm90ZWluIG1hdHJpeCwgYWxsb3dzIGZvciBsb2NhbGx5IGRpZmZlcmVudGlhdGVkIG1hdGVyaWFsIHByb3BlcnRpZXMuICIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBJbiBjb29wZXJhdGlvbiB3aXRoIHRoZSBBTktBIFN5bmNocm90cm9uIFJhZGlhdGlvbiBGYWNpbGl0eSBhbmQgdGhlIEluc3RpdHV0ZSBmb3IgUGhvdG9uIFNjaWVuY2UgYW5kIFN5bmNocm90cm9uIFJhZGlhdGlvbiBhdCB0aGUgS2FybHNydWhlIEluc3RpdHV0ZSBvZiBUZWNobm9sb2d5IChLSVQpLCBoaWdoIHJlc29sdXRpb24gM0QgbW9kZWxzIG9mIHZhcmlvdXMgYmVldGxlIGVseXRyYSB3ZXJlIGV4dHJhY3RlZCB0aHJvdWdoIG1pY3JvLWNvbXB1dGVkIHRvbW9ncmFwaHkuIFRvZ2V0aGVyIHdpdGggU0VNIHNjYW5zIGZyb20gdGhlIFVuaXZlcnNpdHkgb2YgVMO8YmluZ2VuLCB0aGlzIGVuYWJsZWQgYW4gYW5hbHlzaXMgb2YgdGhlIGludHJpY2F0ZSBpbnRlcm5hbCBzdHJ1Y3R1cmVzIG9mIHRoZSBiZWV0bGUgc2hlbGwuIFRoZSBFbHl0cmEgbW9ycGhvbG9neSBpcyBiYXNlZCBvbiBhIGRvdWJsZSBsYXllcmVkIHN0cnVjdHVyZSB3aGljaCBpcyBjb25uZWN0ZWQgYnkgY29sdW1uLWxpa2UgZG91Ymx5IGN1cnZlZCBzdXBwb3J0IGVsZW1lbnRzLCB0aGUgdHJhYmVjdWxhZS4gVGhlIGZpYmVyIGxheW91dCB3aXRoaW4gYSB0cmFiZWN1bGEgbWVyZ2VzIHRoZSB1cHBlciBhbmQgbG93ZXIgc2hlbGwgc2VnbWVudHMgd2l0aCBjb250aW51b3VzIGZpYmVycy4gVGhlIGRpc3RyaWJ1dGlvbiBhbmQgZ2VvbWV0cmljIGFydGljdWxhdGlvbiBvZiB0aGUgdHJhYmVjdWxhIGlzIGhpZ2hseSBkaWZmZXJlbnRpYXRlZCB0aHJvdWdob3V0IHRoZSBiZWV0bGUgc2hlbGwuIFRocm91Z2ggY29tcGFyYXRpdmUgc3R1ZGllcyBvZiBtdWx0aXBsZSBmbHlpbmcgYmVldGxlIHNwZWNpZXMgdGhlIHVuZGVybHlpbmcgc3RydWN0dXJhbCBwcmluY2lwbGVzIGNvdWxkIGJlIGlkZW50aWZpZWQgYW5kIHRyYW5zbGF0ZWQgaW50byBkZXNpZ24gcnVsZXMgZm9yIHN0cnVjdHVyYWwgbW9ycGhvbG9naWVzLiAiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJ2LWNhcmQtdGl0bGUiLCBbX3ZtLl92KCJNYXRlcmlhbCBhbmQgU3RydWN0dXJhbCBMb2dpYyIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJ2LWNhcmQtdGV4dCIsIFsKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBCYXNlZCBvbiB0aGUgZGlmZmVyZW50aWF0ZWQgdHJhYmVjdWxhZSBtb3JwaG9sb2d5IGFuZCB0aGUgaW5kaXZpZHVhbCBmaWJlciBhcnJhbmdlbWVudHMsIGEgZG91YmxlIGxheWVyZWQgbW9kdWxhciBzeXN0ZW0gd2FzIGdlbmVyYXRlZCBmb3IgaW1wbGVtZW50YXRpb24gaW4gYW4gYXJjaGl0ZWN0dXJhbCBwcm90b3R5cGUuIFRocm91Z2ggdGhlIGRldmVsb3BtZW50IG9mIGNvbXB1dGF0aW9uYWwgZGVzaWduIGFuZCBzaW11bGF0aW9uIHRvb2xzLCBib3RoIHRoZSByb2JvdGljIGZhYnJpY2F0aW9uIGNoYXJhY3RlcmlzdGljcyBhbmQgdGhlIGFic3RyYWN0ZWQgYmlvbWltZXRpYyBwcmluY2lwbGVzIGNvdWxkIGJlIHNpbXVsdGFuZW91c2x5IGludGVncmF0ZWQgaW4gdGhlIGRlc2lnbiBwcm9jZXNzLiAiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIgR2xhc3MgYW5kIGNhcmJvbiBmaWJlciByZWluZm9yY2VkIHBvbHltZXJzIHdlcmUgY2hvc2VuIGFzIGJ1aWxkaW5nIG1hdGVyaWFsLCBkdWUgdG8gdGhlaXIgaGlnaCBwZXJmb3JtYW5jZSBxdWFsaXRpZXMgKGhpZ2ggc3RyZW5ndGggdG8gd2VpZ2h0IHJhdGlvKSBhbmQgdGhlIHBvdGVudGlhbCB0byBnZW5lcmF0ZSBkaWZmZXJlbnRpYXRlZCBtYXRlcmlhbCBwcm9wZXJ0aWVzIHRocm91Z2ggZmliZXIgcGxhY2VtZW50IHZhcmlhdGlvbi4gVG9nZXRoZXIgd2l0aCB0aGVpciB1bnJlc3RyYWluZWQgbW9sZGFiaWxpdHksIGZpYmVyIHJlaW5mb3JjZWQgcG9seW1lcnMgYXJlIHN1aXRhYmxlIHRvIGltcGxlbWVudCB0aGUgY29tcGxleCBnZW9tZXRyaWVzIGFuZCBtYXRlcmlhbCBvcmdhbml6YXRpb25zIG9mIHRoZSBhYnN0cmFjdGVkIG5hdHVyYWwgY29uc3RydWN0aW9uIHByaW5jaXBsZXMuIENvbnZlbnRpb25hbCBmYWJyaWNhdGlvbiBtZXRob2RzIGZvciBmaWJlciBjb21wb3NpdGUgZWxlbWVudHMgcmVxdWlyZSBhIG1vbGQgdG8gZGVmaW5lIGZvcm0uIEhvd2V2ZXIsIHRoaXMgbWV0aG9kIHByb3ZlcyB0byBiZSB1bnN1aXRhYmxlIHRvIHRyYW5zZmVyIG5hdHVyYWwgY29uc3RydWN0aW9uIHByaW5jaXBsZXMgaW50byBhcmNoaXRlY3R1cmFsIGFwcGxpY2F0aW9ucyBzaW5jZSB0aGV5IHVzdWFsbHkgaW52b2x2ZSB1bmlxdWUgZWxlbWVudHMgdGhhdCB3b3VsZCByZXF1aXJlIGV4dGVuc2l2ZSBmb3Jtd29yayBhbmQgcHJvaGliaXRpdmVseSBjb21wbGV4IG1vbGRzLiAiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIgRm9yIHRoZSBmYWJyaWNhdGlvbiBvZiB0aGUgZ2VvbWV0cmljYWxseSB1bmlxdWUsIGRvdWJsZSBjdXJ2ZWQgbW9kdWxlcyBhIHJvYm90aWMgY29yZWxlc3Mgd2luZGluZyBtZXRob2Qgd2FzIGRldmVsb3BlZCwgd2hpY2ggdXNlcyB0d28gY29sbGFib3JhdGluZzYtYXhpcyBpbmR1c3RyaWFsIHJvYm90cyB0byB3aW5kIGZpYmVycyBiZXR3ZWVuIHR3byBjdXN0b20tbWFkZSBzdGVlbCBmcmFtZSBlZmZlY3RvcnMgaGVsZCBieSB0aGUgcm9ib3RzLiBXaGlsZSB0aGUgZWZmZWN0b3JzIGRlZmluZSB0aGUgZWRnZXMgb2YgZWFjaCBjb21wb25lbnQsIHRoZSBmaW5hbCBnZW9tZXRyeSBpcyBlbWVyZ2luZyB0aHJvdWdoIHRoZSBpbnRlcmFjdGlvbiBvZiB0aGUgc3Vic2VxdWVudGx5IGxhaWQgZmliZXJzLiBUaGUgZmliZXJzIGFyZSBhdCBmaXJzdCBsaW5lYXJseSB0ZW5zaW9uZWQgYmV0d2VlbiB0aGUgdHdvIGVmZmVjdG9yIGZyYW1lcy4gVGhlIHN1YnNlcXVlbnRseSB3b3VuZCBmaWJlcnMgbGllIG9uIGFuZCB0ZW5zaW9uIGVhY2ggb3RoZXIgd2hpY2ggcmVzdWx0cyBpbiBhIHJlY2lwcm9jYWwgZGVmb3JtYXRpb24uIFRoaXMgZmliZXLigJNmaWJlciBpbnRlcmFjdGlvbiBnZW5lcmF0ZXMgZG91Ymx5IGN1cnZlZCBzdXJmYWNlcyBmcm9tIGluaXRpYWxseSBzdHJhaWdodCBkZXBvc2l0ZWQgZmliZXIgY29ubmVjdGlvbnMuIFRoZSBvcmRlciBpbiB3aGljaCB0aGUgcmVzaW4gaW1wcmVnbmF0ZWQgZmliZXIgYnVuZGxlcyAocm92aW5ncykgYXJlIHdvdW5kIG9udG8gdGhlIGVmZmVjdG9ycyBpcyBkZWNpc2l2ZSBmb3IgdGhpcyBwcm9jZXNzIGFuZCBpcyBkZXNjcmliZWQgdGhyb3VnaCB0aGUgd2luZGluZyBzeW50YXguIFRoZSBzcGVjaWZpYyBzZXF1ZW5jZSBvZiBmaWJlciB3aW5kaW5nIGFsbG93cyB0byBjb250cm9sIHRoZSBsYXlvdXQgb2YgZXZlcnkgaW5kaXZpZHVhbCBmaWJlciBsZWFkaW5nIHRvIGEgbWF0ZXJpYWwgZHJpdmVuIGRlc2lnbiBwcm9jZXNzLiBUaGVzZSByZWNpcHJvY2l0aWVzIGJldHdlZW4gbWF0ZXJpYWwsIGZvcm0sIHN0cnVjdHVyZSBhbmQgZmFicmljYXRpb24gYXJlIGRlZmluZWQgdGhyb3VnaCB0aGUgd2luZGluZyBzeW50YXggd2hpY2ggdGhlcmVmb3JlIGJlY29tZXMgYW4gaW50ZWdyYWwgcGFydCBvZiB0aGUgY29tcHV0YXRpb25hbCBkZXNpZ24gdG9vbC4gIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIFRoZSBlZmZlY3RvcnMgYXJlIGFkanVzdGFibGUgdG8gdmFyaW91cyBjb21wb25lbnQgZ2VvbWV0cmllcywgbGVhZGluZyB0byBvbmx5IG9uZSByZWNvbmZpZ3VyYWJsZSB0b29sIHNldHVwIGZvciBhbGwgMzYgZWxlbWVudHMuIENvcmVsZXNzIGZpbGFtZW50IHdpbmRpbmcgZG9lcyBub3Qgb25seSBzYXZlIHN1YnN0YW50aWFsIHJlc291cmNlcyB0aHJvdWdoIHRoZSBuZWVkbGVzc25lc3Mgb2YgaW5kaXZpZHVhbCBtb2xkcywgYnV0IGluIGl0c2VsZiBpcyBhIHZlcnkgbWF0ZXJpYWwgZWZmaWNpZW50IGZhYnJpY2F0aW9uIHByb2Nlc3Mgc2luY2UgdGhlcmUgaXMgbm8gd2FzdGUgb3IgY3V0LW9mZiBwaWVjZXMuICIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBUaGUgc3BlY2lmaWMgcm9ib3RpYyBmYWJyaWNhdGlvbiBwcm9jZXNzIGluY2x1ZGVzIHRoZSB3aW5kaW5nIG9mIDYgaW5kaXZpZHVhbCBsYXllcnMgb2YgZ2xhc3MgYW5kIGNhcmJvbiBmaWJlcnMuIEEgZmlyc3QgZ2xhc3MgZmliZXIgbGF5ZXIgZGVmaW5lcyB0aGUgZWxlbWVudHMgZ2VvbWV0cnkgYW5kIHNlcnZlcyBhcyBmb3Jtd29yayBmb3IgdGhlIHN1YnNlcXVlbnQgY2FyYm9uIGZpYmVyIGxheWVycy4gVGhlc2UgY2FyYm9uIGZpYmVyIGxheWVycyBhY3QgYXMgc3RydWN0dXJhbCByZWluZm9yY2VtZW50IGFuZCBhcmUgaW5kaXZpZHVhbGx5IHZhcmllZCB0aHJvdWdoIHRoZSBmaWJlcnMgYW5pc290cm9waWMgYXJyYW5nZW1lbnQuIFRoZSBpbmRpdmlkdWFsIGxheW91dCBvZiB0aGUgY2FyYm9uIGZpYmVycyBpcyBkZWZpbmVkIGJ5IHRoZSBmb3JjZXMgYWN0aW5nIG9uIGVhY2ggY29tcG9uZW50IHdoaWNoIGFyZSBkZXJpdmVkIGZyb20gRkUgQW5hbHlzaXMgb2YgdGhlIGdsb2JhbCBzdHJ1Y3R1cmUuIFRoZSBnZW5lcmF0ZWQgd2luZGluZyBzeW50YXggaXMgdHJhbnNmZXJyZWQgdG8gdGhlIHJvYm90cyBhbmQgYWxsb3dzIHRoZSBhdXRvbWF0aWMgd2luZGluZyBvZiB0aGUgNiBmaWJlciBsYXllcnMuICIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInYtY2FyZC10aXRsZSIsIFtfdm0uX3YoIkJpb21pbWV0aWMgUHJvdG90eXBlIildKSwKICAgICAgICAgICAgICAgICAgX2MoInYtY2FyZC10ZXh0IiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiIEluIHRvdGFsIDM2IGluZGl2aWR1YWwgZWxlbWVudHMgd2VyZSBmYWJyaWNhdGVkLCB3aG9zZSBnZW9tZXRyaWVzIGFyZSBiYXNlZCBvbiBzdHJ1Y3R1cmFsIHByaW5jaXBsZXMgYWJzdHJhY3RlZCBmcm9tIHRoZSBiZWV0bGUgZWx5dHJhLiBFYWNoIG9mIHRoZW0gaGFzIGFuIGluZGl2aWR1YWwgZmliZXIgbGF5b3V0IHdoaWNoIHJlc3VsdHMgaW4gYSBtYXRlcmlhbCBlZmZpY2llbnQgbG9hZC1iZWFyaW5nIHN5c3RlbS4gVGhlIGJpZ2dlc3QgZWxlbWVudCBoYXMgYSAyLjYgbSBkaWFtZXRlciB3aXRoIGEgd2VpZ2h0IG9mIG9ubHkgMjQuMSBrZy4gVGhlIHJlc2VhcmNoIHBhdmlsaW9uIGNvdmVycyBhIHRvdGFsIGFyZWEgb2YgNTAgbcKyIGFuZCBhIHZvbHVtZSBvZiAxMjIgbcKzIHdpdGggYSB3ZWlnaHQgb2YgNTkzIGtnLiAiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIgVGhlIG92ZXJhbGwgZ2VvbWV0cnkgcmVhY3RzIHRvIHNpdGUtc3BlY2lmaWMgY29uZGl0aW9ucyBvZiB0aGUgcHVibGljIHNwYWNlIGFyb3VuZCB0aGUgdW5pdmVyc2l0eSBidWlsZGluZyBpbiBjbG9zZSBwcm94aW1pdHkgdG8gdGhlIHBhcmsuIEF0IHRoZSBzYW1lIHRpbWUgaXQgZGVtb25zdHJhdGVzIHRoZSBtb3JwaG9sb2dpYyBhZGFwdGFiaWxpdHkgb2YgdGhlIHN5c3RlbSwgYnkgZ2VuZXJhdGluZyBtb3JlIGNvbXBsZXggc3BhdGlhbCBhcnJhbmdlbWVudHMgdGhhbiBhIHNpbXBsZSBzaGVsbCBzdHJ1Y3R1cmUuIEFsdG9nZXRoZXIgdGhlIHJlc2VhcmNoIHBhdmlsaW9uIHNob3dzIGhvdyB0aGUgY29tcHV0YXRpb25hbCBzeW50aGVzaXMgb2YgYmlvbG9naWNhbCBzdHJ1Y3R1cmFsIHByaW5jaXBsZXMgYW5kIHRoZSBjb21wbGV4IHJlY2lwcm9jaXRpZXMgYmV0d2VlbiBtYXRlcmlhbCwgZm9ybSBhbmQgcm9ib3RpYyBmYWJyaWNhdGlvbiBjYW4gbGVhZCB0byB0aGUgZ2VuZXJhdGlvbiBvZiBpbm5vdmF0aXZlIGZpYmVyIGNvbXBvc2l0ZSBjb25zdHJ1Y3Rpb24gbWV0aG9kcy4gQXQgdGhlIHNhbWUgdGltZSB0aGUgbXVsdGlkaXNjaXBsaW5hcnkgcmVzZWFyY2ggYXBwcm9hY2ggZG9lcyBub3Qgb25seSBsZWFkIHRvIHBlcmZvcm1hdGl2ZSBhbmQgbWF0ZXJpYWwgZWZmaWNpZW50IGxpZ2h0d2VpZ2h0IGNvbnN0cnVjdGlvbnMsIGl0IGFsc28gZXhwbG9yZXMgbm92ZWwgc3BhdGlhbCBxdWFsaXRpZXMgYW5kIGV4cGFuZHMgdGhlIHRlY3RvbmljIHBvc3NpYmlsaXRpZXMgb2YgYXJjaGl0ZWN0dXJlLiAiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJ2LWRpdmlkZXIiLCB7IHN0YXRpY0NsYXNzOiAibXgtNCBteS03IiB9KSwKICAgICAgICAgICAgICAgICAgX2MoInYtY2FyZC10aXRsZSIsIHsgc3RhdGljQ2xhc3M6ICJtYi02IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IENyZWRpdHMiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInYtY2FyZC1zdWJ0aXRsZSIsIFsKICAgICAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIlJlc2VhcmNoIEluc3RpdHV0ZXMiKV0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygidi1jYXJkLXRleHQiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogImh0dHA6Ly9pY2QudW5pLXN0dXR0Z2FydC5kZS8iLAogICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICJJbnN0aXR1dGUgZm9yIENvbXB1dGF0aW9uYWwgRGVzaWduIGFuZCBDb25zdHJ1Y3Rpb24gKElDRCkiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIOKAkyBQcm9mLiBBY2hpbSBNZW5nZXMiKSwKICAgICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cuaXRrZS51bmktc3R1dHRnYXJ0LmRlLyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIkluc3RpdHV0ZSBvZiBCdWlsZGluZyBTdHJ1Y3R1cmVzIGFuZCBTdHJ1Y3R1cmFsIERlc2lnbiAoSVRLRSkiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIOKAkyBQcm9mLiBKYW4gS25pcHBlcnMgIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJ2LWNhcmQtc3VidGl0bGUiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImIiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlJlc2VhcmNoIERldmVsb3BtZW50IGFuZCBQcm9qZWN0IE1hbmFnZW1lbnQiKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygidi1jYXJkLXRleHQiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBNb3JpdHogRMO2cnN0ZWxtYW5uLCBWYXNzaWxpb3MgS2lydHpha2lzLCBTdGVmYW5hIFBhcmFzY2hvLCBNYXJzaGFsbCBQcmFkbywgVG9iaWFzIFNjaHdpbm4gIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJ2LWNhcmQtc3VidGl0bGUiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImIiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlN5c3RlbSBEZXZlbG9wbWVudCwgRmFicmljYXRpb24gKyBDb25zdHJ1Y3Rpb24iKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygidi1jYXJkLXRleHQiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJXaVNlIDIwMTItMTMsIFNvU2UgMjAxMzoiKV0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgTGV5bGEgWXVuaXMsIERlc2lzbGF2YSBBbmdlbG92YSwgSGFucy1DaHJpc3RpYW4gQsOkY2tlciwgTWF4aW1pbGlhbiBGaWNodGVyLCBFdWdlbiBHcmFzcywgTWljaGFlbCBIZXJyaWNrLCBOYW0gSG9hbmcsIEFsZWphbmRybyBKYXJhbWlsbG8sIE5vcmJlcnQgSnVuZHQsIFRhaWNoaSBLdW1hLCBPbmRyZWogS3lqw6FuZWssIFNvcGhpYSBMZWlzdG5lciwgTHVjYSBNZW5naGluaSwgQ2xhaXJlIE1pbG5lcywgTWFydGluIE5hdXRydXAsIEdlcmdhbmFSdXNlbm92YSwgUGV0YXIgVHJhc3NpZXYgLCBTYXNjaGEgVmFsbG9uLCBTaGl5dSBXaWUgIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJXaVNlIDIwMTMtMTQ6IildKSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIEhhc3NhbiBBYmJhc2ksIFlhc3NtaW4gQWwtS2hhc2F3bmVoLCBEZXNpc2xhdmEgQW5nZWxvdmEsIFl1bGl5YSBCYXJhbm92c2theWEsIE1hcnRhIEJlc2FsdSwgR2l1bGlvIEJydWduYXJvLCBFbGVuYSBDaGlyaWRuaWssIEV2YSBFc3B1bnksIE1hdHRoaWFzIEhlbG1yZWljaCwgSnVsaWFuIEjDtmxsLCBTaGltIEthcm1pbiwgR2VvcmdpIEthemxhY2hldiwgU2ViYXN0aWFuIEtyw7ZuZXIsIFZhbmdlbCBLdWtvdiwgRGF2aWQgTGVvbiwgU3RlcGhlbiBNYWhlciwgQW1hbmRhIE1vb3JlLCAiCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly93d3cucGF1bHBvaW5ldC5jb20vIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJQYXVsIFBvaW5ldCIpXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiwgUm9sYW5kIFNhbmRvdmFsLCBFbWlseSBTY29vbmVzLCBEam9yZGplIFN0YW5vamV2aWMsIEFuZHJlaSBTdG9pY3VsZXNjdSwgS2VucnlvIFRha2FoYXNoaSwgTWFyaWEgWWFibG9uaW5hIgogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJXaXRoIHRoZSBzdXBwb3J0IG9mOiIpXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTWljaGFlbCBQcmVpc2FjayAiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInYtY2FyZC1zdWJ0aXRsZSIsIFtfYygiYiIsIFtfdm0uX3YoIkZ1bmRpbmciKV0pXSksCiAgICAgICAgICAgICAgICAgIF9jKCJ2LWNhcmQtdGV4dCIsIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiIENvbXBldGVuY2UgTmV0d29yayBCaW9taW1ldGljcywgS3VrYSBSb2JvdGVyIEdtYkgsIFNHTCBHcm91cCwgU2lrYSwgQUZCVyDigJMgQWxsaWFueiBGYXNlcmJhc2llcnRlIFdlcmtzdG9mZmUgQmFkZW4tV8O8cnR0ZW1iZXJnICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAidi1jb250YWluZXIiLAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAidi1jYXJkIiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyB3aWR0aDogIjY0MCIsIGhlaWdodDogIjE1OCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInYtaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJncmV5IGxpZ2h0ZW4tMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi8uLi8uLi8uLi9zdGF0aWMvSUNELUlUS0VfUlAxMy0xNF9TcG9uc29ycy5qcGciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYXNwZWN0LXJhdGlvIjogIjEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjY0MCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjE1OCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJ2LWNhcmQtc3VidGl0bGUiLCBbX2MoImIiLCBbX3ZtLl92KCJMaW5rcyIpXSldKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInYtYnRuIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1hLTIgbWwtMyIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICByb3VuZGVkOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgZWxldmF0aW9uOiA0LAogICAgICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5kZXplZW4uY29tLzIwMTQvMDYvMjYvaWNkLWl0a2UtcGF2aWxpb24tYmVldGxlLXNoZWxscy11bml2ZXJzaXR5LW9mLXN0dXR0Z2FydC8iLAogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygidi1pY29uIiwgeyBhdHRyczogeyBsZWZ0OiAiIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJtZGktYXJyb3ctcmlnaHQiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBEZXplZW4gIikKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInYtYnRuIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1hLTIiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRlZDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZXZhdGlvbjogNCwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuYXJjaGRhaWx5LmNvbS81MjI0MDgvaWNkLWl0a2UtcmVzZWFyY2gtcGF2aWxpb24tMjAxNC1pY2QtaXRrZS11bml2ZXJzaXR5LW9mLXN0dXR0Z2FydC8iLAogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygidi1pY29uIiwgeyBhdHRyczogeyBsZWZ0OiAiIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJtZGktYXJyb3ctcmlnaHQiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBBcmNoRGFpbHkgIikKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInYtYnRuIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1hLTIiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcm91bmRlZDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGVsZXZhdGlvbjogNCwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuZGVzaWduYm9vbS5jb20vYXJjaGl0ZWN0dXJlL2ljZC1pdGtlLXJlc2VhcmNoLXBhdmlsaW9uLTIwMTMtMTQtaW50ZXJ2aWV3LTA4LTE4LTIwMTQvIiwKICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInYtaWNvbiIsIHsgYXR0cnM6IHsgbGVmdDogIiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigibWRpLWFycm93LXJpZ2h0IikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRGVzaWduQm9vbSAiKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygidi1jYXJkLXRpdGxlIiwgeyBzdGF0aWNDbGFzczogIm10LTEwIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IERhdGUiKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInYtY2FyZC10ZXh0IiwgW192bS5fdigiIDIwMTYgIildKSwKICAgICAgICAgICAgICAgICAgX2MoInYtY2FyZC10aXRsZSIsIFtfdm0uX3YoIlByb2plY3QgVmlkZW8iKV0pLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAidi1jb250YWluZXIiLAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAidi1jYXJkIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxlOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlZDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIzNjAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICI2NDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxldmF0aW9uOiAyNCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiYmxhY2siCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGJvcmRlcjogIjAiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbjogInRvcCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjM2MCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNjQwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVib3JkZXI6ICIwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dmdWxsc2NyZWVuOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAiaHR0cHM6Ly9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLzk4NzgzODQ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3c6ICJhdXRvcGxheTsgZnVsbHNjcmVlbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJ2LWNhcmQtdGl0bGUiLCB7IHN0YXRpY0NsYXNzOiAibXQtMTAiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByb2plY3QgTG9jYXRpb24iKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInYtY29udGFpbmVyIiwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgInYtY2FyZCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBoZWlnaHQ6ICIzNTAiLCB3aWR0aDogIjEwMCUiLCBlbGV2YXRpb246IDI0IH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpZnJhbWUiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1hcCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBib3JkZXI6ICIwIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvZW1iZWQ/cGI9ITFtMTghMW0xMiExbTMhMWQyNjI4Ljk4OTI1NTQyMzg5MSEyZDkuMTczMDYzNzE1NjcxNjgzITNkNDguNzgyMDk1Mzc5MjgwMDg2ITJtMyExZjAhMmYwITNmMCEzbTIhMWkxMDI0ITJpNzY4ITRmMTMuMSEzbTMhMW0yITFzMHg0Nzk5ZGIzMTMyYmE5OGIxJTNBMHgzMTk3YzA4M2RiMTc1N2EhMnNLZXBsZXJzdHJhJUMzJTlGZSUyMDExJTJDJTIwNzAxNzQlMjBTdHV0dGdhcnQlMkMlMjBHZXJtYW55ITVlMCEzbTIhMXNlbiEyc3VrITR2MTU3Mzc1MDI0NjY4NyE1bTIhMXNlbiEyc3VrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTAwJSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lYm9yZGVyOiAiMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlbjogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICkKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}